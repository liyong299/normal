<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
	default-lazy-init="true" default-merge="true">

	<!-- 添加注解驱动 -->
	<mvc:annotation-driven />

	<!-- 通过mvc:resources设置静态资源，这样servlet就会处理这些静态资源，而不通过控制器 -->
	<!-- 设置不过滤内容，比如:css,jquery,img 等资源文件 -->
	<mvc:resources location="/assets/" mapping="/assets/**" />
	<mvc:resources mapping="/**/images/**" location="/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/**/js/**" location="/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/**/css/**" location="/css/"
		cache-period="31556926" />
	<mvc:resources location="/**/html/**/*.html" mapping="/**.html"
		cache-period="31556926" />


	<!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
	<!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.ftl -->
	<mvc:view-controller path="/500" view-name="/500" />
	<mvc:view-controller path="/404" view-name="/404" />
	<mvc:view-controller path="/403" view-name="/403" />

	<!-- 防止url被再次解析 -->
	<mvc:default-servlet-handler />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views" />
		<property name="suffix" value=".ftl" />
	</bean>

	<!-- freemarker的配置 -->
	<bean id="freemarkerConfigurer" class="com.dup.core.config.FreeMarkerConfigurer">

	</bean>

	<!-- 适配视图配置 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager">
			<bean
				class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
				<property name="ignoreAcceptHeader" value="true" />
				<property name="defaultContentType" value="text/html" />
				<property name="mediaTypes">
					<props>
						<prop key="json">application/json</prop>
						<prop key="xml">application/xml</prop>
					</props>
				</property>
			</bean>
		</property>
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
					<property name="suffix" value=".ftl" />
					<property name="contentType"
						value="text/html;charset=${freemarker.view.encoding:UTF-8}" />
					<property name="exposeRequestAttributes" value="true" />
					<property name="exposeSessionAttributes" value="true" />
				</bean>
			</list>
		</property>
		<!-- <property name="defaultViews"> <list> <bean class="coo.mvc.handler.GenericXStreamView" 
			/> <bean class="coo.mvc.handler.GenericJacksonView" /> </list> </property> -->
	</bean>

	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<props>
				<prop key="json">application/json</prop>
				<prop key="xml">application/xml</prop>
			</props>
		</property>
	</bean>

	<!-- 国际化配置 -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>

	<!-- 验证配置 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>


	<!-- 加载应用组件 默认扫描的包路径 <context:component-scan base-package="com.dup.core" 
		/> -->

	<!-- @Controller 声明Action组件 @Service 声明Service组件 @Service("myMovieLister") 
		@Repository 声明Dao组件 @Component 泛指组件, 当不好归类时. @RequestMapping("/menu") 请求映射 
		@Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") @Autowired 
		用于注入，(spring提供的) 默认按类型装配 @Transactional( rollbackFor={Exception.class}) 事务管理 
		@ResponseBody @Scope("prototype") 设定bean的作用域 -->
	<context:component-scan base-package="com.dup.**.control" />


	<!-- 总错误处理 这里主要的类是SimpleMappingExceptionResolver类，和他的父类AbstractHandlerExceptionResolver类。 
		具体可以配置哪些属性，我是通过查看源码知道的。 你也可以实现HandlerExceptionResolver接口，写一个自己的异常处理程序。 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error/error</value>
			<!-- error页面可以通过Exception e = (Exception)request.getAttribute("exception")获得异常信息 -->
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
	</bean>
</beans>  